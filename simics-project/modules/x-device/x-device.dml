/*
  Â© 2016 Intel Corporation
*/

// This is an incomplete X device module to learn how to translate 
//specifications to dml code. 

dml 1.4;

device x_device;

param desc = "example X device";

param documentation =
    "X device incomplete for dml workshop. Find the specification "
    + "on the documentation";

import "utility.dml";

param byte_order = "little-endian";

// Memory-space connection
connect target_mem_space {
    param documentation =
        "The memory space on which the X device operates. Data will be "
        + "read from and copied to the memory associated with this memory "
        + "space.";
    param configuration = "required";
    interface memory_space;
}

// DML Workshop
// Add your code HERE!
bank regs {
    param register_size = 8; 
    register reg_buffer_size size 4 @ 0x00{
        field size @ [63:0] is (read_only);
    }
    register reg_data_buffer size 4 @ 0x04{
        field data_buffer @ [63:0] {
            param documentation="Stores the data to be copied into the reg_buffer.instance_x ";
        }
    }
    register reg_addres @ 0x08{
        field offset @ [63:0];
    }
    register reg_buffer @ 0x20{
        field instance_0 @ [7:0] is (read_only);
        field instance_1 @ [15:8] is (read_only);
        field instance_2 @ [23:16] is (read_only);
        field instance_3 @ [32:23] is (read_only);
    }
    register reg_command @ 0x40{
        field cmd @ [7:0] {
            param documentation="When this field receives a value, it will operate the fields from reg_buffer register according to the encoding and should store the result in the reg_output.output field 001: instance_0 +instance_1 010: instance_1 - instance_2  100: instance_2 * instance_3 Any other value is Reserved. Illegal programing.";
        }
    }
    register reg_output @ 0x60{
        field output @ [63:0] is (read_only){
            param documentation="This field will allocate the result from the cmd operation";
        }
    }


    method operation (){

        switch(reg_command.cmd){
        case 001: {
            reg_output.output.val : reg_buffer.instance_0.val + reg_buffer.instance_1.val;
        }
        case 010: {
            reg_output.output.val : reg_buffer.instance_1.val - reg_buffer.instance_2.val;
        }
        case 100: {
            reg_output.output.val : reg_buffer.instance_2.val * reg_buffer.instance_3.val;
        }

        }

    }

    method mailbox(){
        
    }

}
