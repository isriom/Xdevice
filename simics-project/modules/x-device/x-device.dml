/*
  Â© 2016 Intel Corporation
*/

// This is an incomplete X device module to learn how to translate 
//specifications to dml code. 

dml 1.4;

device x_device;

param desc = "example X device";

param documentation =
    "X device incomplete for dml workshop. Find the specification "
    + "on the documentation";

import "utility.dml";

param byte_order = "little-endian";

// Memory-space connection
connect target_mem_space {
    param documentation =
        "The memory space on which the X device operates. Data will be "
        + "read from and copied to the memory associated with this memory "
        + "space.";
    param configuration = "required";
    interface memory_space;
}

// DML Workshop
// Add your code HERE!
bank regs {
    param register_size = 8; 
    register reg_buffer_size @ 0x00{
        field x_size @ [63:0] is (read_only);
    }
    register reg_data_buffer @ 0x08{
        field data_buffer @ [63:0] {
            param documentation="Stores the data to be copied into the reg_buffer.instance_x ";
        }
    }
    register reg_address @ 0x10{
        field x_offset @ [63:0] is (write,read){
        	method write(uint64 value){
        		default(value);
                	mailbox();
       		}
       }
    }
    register reg_buffer @ 0x20{
        field instance_0 @ [7:0] is (read_only);
        field instance_1 @ [15:8] is (read_only);
        field instance_2 @ [23:16] is (read_only);
        field instance_3 @ [32:24] is (read_only);
    }
    register reg_command @ 0x40{
        field cmd @ [7:0] is (write,read) {
            
            param documentation="When this field receives a value, it will operate the fields from reg_buffer register according to the encoding and should store the result in the reg_output.output field 001: instance_0 +instance_1 010: instance_1 - instance_2  100: instance_2 * instance_3 Any other value is Reserved. Illegal programing.";
            method write(uint64 value){
                default(value);
                operation();
            }

        }
    }
    register reg_output @ 0x60{
        field output @ [63:0] is (read_only){
            param documentation="This field will allocate the result from the cmd operation";
        }
    }


    method operation (){

    
    	if(reg_command.cmd.get() == 1){
    		reg_output.output.set( reg_buffer.instance_0.get() + reg_buffer.instance_1.get());
    	}else if(reg_command.cmd.get() == 2){
    		reg_output.output.set( reg_buffer.instance_1.get() - reg_buffer.instance_2.get());
    	}else if(reg_command.cmd.get() == 4){
    		reg_output.output.set( reg_buffer.instance_2.get() * reg_buffer.instance_3.get());
    	}else{
    		log error,1:"trying to make a indefined operation %u",reg_command.cmd.get();
    	}
        

    }

    method mailbox(){
    
    	if(reg_address.x_offset.get() == 0){
    		reg_buffer.instance_0.set( reg_data_buffer.get_val() );
    	}else if(reg_address.x_offset.get() == 1){
    		reg_buffer.instance_1.set( reg_data_buffer.get_val() );
    	}else if(reg_address.x_offset.get() == 2){
    		reg_buffer.instance_2.set( reg_data_buffer.get_val() );
    	}else if(reg_address.x_offset.get() == 3){
    		reg_buffer.instance_3.set( reg_data_buffer.get_val() );
    	}else{
    		log error,1:"trying to make a indefined offset %u",reg_address.x_offset.get();
    	}
    	
    	//reg_buffer.set_val(reg_data_buffer.get_val());
    	
        
    }

}
